{"version":3,"sources":["Table1.js","TextField.js","Body.js","App.js","serviceWorker.js","index.js"],"names":["Table1","this","props","data","map","res","React","Component","TextField","state","value","handleChange","bind","renderTable","event","console","log","target","axios","get","then","response","setState","hits","className","type","onChange","id","Body","variant","fullWidth","label","App","selectedTab","renderBody","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kRAGqBA,E,4JAEnB,WACE,OACE,6BACGC,KAAKC,MAAMC,KAAKC,KAAI,SAAAC,GAAG,OAAE,4BAAKA,EAAG,e,GALNC,IAAMC,W,gCCArBC,E,kDAEnB,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CAACC,MAAM,EAAKD,MAAON,KAAK,CAAC,KACtC,EAAKQ,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAJF,E,gDAOpB,SAAaE,GAAO,IAAD,OACpBC,QAAQC,IAAIF,EAAMG,OAAOP,OAGvBQ,IAAMC,IAAI,6CAA6CL,EAAMG,OAAOP,MAAM,+BAA+BU,MACxG,SAACC,GAAY,EAAKC,SAAS,CAACnB,KAAKkB,EAASlB,KAAKoB,Y,yBAGjD,SAAYpB,GAEX,OADAY,QAAQC,IAAI,UAGZ,kBAAC,EAAD,CAAOb,KAAMA,M,oBAKb,WACE,OACE,yBAAKqB,UAAU,OACd,2BAAOC,KAAK,OAAOf,MAAOT,KAAKQ,MAAMC,MAAOgB,SAAUzB,KAAKU,eAE3D,kBAAC,EAAD,CAAOgB,GAAG,QAAQxB,KAAMF,KAAKQ,MAAMN,Y,GA/BHG,IAAMC,WCCxBqB,E,4JAGpB,WACG,OACC,yBAAKJ,UAAU,QACd,4CACA,yBAAKA,UAAU,UACb,kBAAC,EAAD,CAAWG,GAAG,iBAAiBE,QAAQ,WAAWC,WAAS,EAAEC,MAAM,iB,GARzCzB,IAAMC,WC6BzByB,G,wDA1Bb,WAAY9B,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACXwB,YAAa,QAHE,E,8CAQnB,WACE,OAAQ,kBAAC,EAAD,Q,yBAGV,WACE,OAAQ,kBAAC,EAAD,Q,oBAEV,WACE,OACE,yBAAKT,UAAU,OACb,8BACCvB,KAAKiC,kB,GApBI3B,cCME4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.6db05fea.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nexport default class Table1 extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.data.map(res=><h2>{res['title']}</h2>)}\r\n       </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport axios from 'axios';\r\nimport Table from './Table1';\r\nexport default class TextField extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value:this.state, data:['']};\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.renderTable = this.renderTable.bind(this);\r\n  }\r\n\r\n handleChange(event){\r\nconsole.log(event.target.value);\r\n\r\n  \r\n  axios.get('http://hn.algolia.com/api/v1/search?query='+event.target.value+'&tags=story&hitsPerPage=500').then\r\n  ((response)=>{this.setState({data:response.data.hits});/*console.log(this.state.data);*/});\r\n } \r\n\r\n renderTable(data){\r\n  console.log(\"called\");\r\n  return(\r\n   \r\n  <Table data={data}/>\r\n  );\r\n }\r\n  \r\n  \r\n  render() {\r\n    return (\r\n      <div className='bar'>\r\n       <input type=\"text\" value={this.state.value} onChange={this.handleChange}></input>\r\n       \r\n       <Table id=\"check\" data={this.state.data}/>\r\n       </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport './Body.css';\r\nimport TextField from './TextField.js';\r\n\r\nexport default class Body extends React.Component {\r\n \r\n \r\n render() {\r\n    return (\r\n     <div className=\"main\">\r\n      <h1>React Search</h1>\r\n      <div className=\"search\">\r\n        <TextField id=\"outlined-basic\" variant=\"outlined\" fullWidth  label=\"Search\"/>\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\nimport Table from './Table1';\n\nimport Body from './Body';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedTab: 'home',\n    };\n  }\n  \n\n  renderBody(){\n    return (<Body/>);\n  }\n\n  renderTable(){\n    return (<Table/>);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div></div>\n        {this.renderBody()}\n      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}